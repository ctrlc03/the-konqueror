// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: messages.proto

package protomessages

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Describes a UUID
type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Describes a task
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Arguments    []string `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Result       string   `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Success      bool     `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ListenerUUID *UUID    `protobuf:"bytes,5,opt,name=listenerUUID,proto3" json:"listenerUUID,omitempty"`
	ImplantUUID  *UUID    `protobuf:"bytes,6,opt,name=implantUUID,proto3" json:"implantUUID,omitempty"`
	Uuid         *UUID    `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Date         string   `protobuf:"bytes,8,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Task) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Task) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Task) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Task) GetListenerUUID() *UUID {
	if x != nil {
		return x.ListenerUUID
	}
	return nil
}

func (x *Task) GetImplantUUID() *UUID {
	if x != nil {
		return x.ImplantUUID
	}
	return nil
}

func (x *Task) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Task) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// Describes an implant
type Implant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           *UUID  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Cwd            string `protobuf:"bytes,2,opt,name=cwd,proto3" json:"cwd,omitempty"`
	Os             string `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`
	Arch           string `protobuf:"bytes,4,opt,name=arch,proto3" json:"arch,omitempty"`
	Jitter         int64  `protobuf:"varint,5,opt,name=jitter,proto3" json:"jitter,omitempty"`
	UserID         string `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	Hostname       string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	FailedCheckIns int64  `protobuf:"varint,8,opt,name=failedCheckIns,proto3" json:"failedCheckIns,omitempty"`
	PID            int64  `protobuf:"varint,9,opt,name=PID,proto3" json:"PID,omitempty"`
	PPID           int64  `protobuf:"varint,10,opt,name=PPID,proto3" json:"PPID,omitempty"`
	MaxRetry       int64  `protobuf:"varint,11,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
	Username       string `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	SleepTime      int64  `protobuf:"varint,13,opt,name=sleepTime,proto3" json:"sleepTime,omitempty"`
	KillDate       int64  `protobuf:"varint,14,opt,name=killDate,proto3" json:"killDate,omitempty"`
	ListenerUUID   *UUID  `protobuf:"bytes,15,opt,name=listenerUUID,proto3" json:"listenerUUID,omitempty"`
	Status         string `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	Type           string `protobuf:"bytes,17,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Implant) Reset() {
	*x = Implant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Implant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Implant) ProtoMessage() {}

func (x *Implant) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Implant.ProtoReflect.Descriptor instead.
func (*Implant) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *Implant) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Implant) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Implant) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Implant) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Implant) GetJitter() int64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *Implant) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Implant) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Implant) GetFailedCheckIns() int64 {
	if x != nil {
		return x.FailedCheckIns
	}
	return 0
}

func (x *Implant) GetPID() int64 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *Implant) GetPPID() int64 {
	if x != nil {
		return x.PPID
	}
	return 0
}

func (x *Implant) GetMaxRetry() int64 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *Implant) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Implant) GetSleepTime() int64 {
	if x != nil {
		return x.SleepTime
	}
	return 0
}

func (x *Implant) GetKillDate() int64 {
	if x != nil {
		return x.KillDate
	}
	return 0
}

func (x *Implant) GetListenerUUID() *UUID {
	if x != nil {
		return x.ListenerUUID
	}
	return nil
}

func (x *Implant) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Implant) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Username struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Username) Reset() {
	*x = Username{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Username) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Username) ProtoMessage() {}

func (x *Username) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Username.ProtoReflect.Descriptor instead.
func (*Username) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (x *Username) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

var File_messages_proto protoreflect.FileDescriptor

var file_messages_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x1c, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x97, 0x02,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x69,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xd9, 0x03, 0x0a, 0x07, 0x49, 0x6d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x50, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x50, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37,
	0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x5b, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x12, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x30, 0x01, 0x32, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x30, 0x01,
	0x32, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x30, 0x01, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData = file_messages_proto_rawDesc
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_proto_rawDescData)
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_messages_proto_goTypes = []interface{}{
	(*UUID)(nil),     // 0: protomessages.UUID
	(*Task)(nil),     // 1: protomessages.Task
	(*Implant)(nil),  // 2: protomessages.Implant
	(*Username)(nil), // 3: protomessages.Username
}
var file_messages_proto_depIdxs = []int32{
	0, // 0: protomessages.Task.listenerUUID:type_name -> protomessages.UUID
	0, // 1: protomessages.Task.implantUUID:type_name -> protomessages.UUID
	0, // 2: protomessages.Task.uuid:type_name -> protomessages.UUID
	0, // 3: protomessages.Implant.uuid:type_name -> protomessages.UUID
	0, // 4: protomessages.Implant.listenerUUID:type_name -> protomessages.UUID
	3, // 5: protomessages.GetImplantCheckIn.GetImplantCheckIn:input_type -> protomessages.Username
	0, // 6: protomessages.GetTaskForListener.GetTaskForListener:input_type -> protomessages.UUID
	3, // 7: protomessages.GetTaskResult.GetTaskResult:input_type -> protomessages.Username
	2, // 8: protomessages.GetImplantCheckIn.GetImplantCheckIn:output_type -> protomessages.Implant
	1, // 9: protomessages.GetTaskForListener.GetTaskForListener:output_type -> protomessages.Task
	1, // 10: protomessages.GetTaskResult.GetTaskResult:output_type -> protomessages.Task
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Implant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Username); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_rawDesc = nil
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GetImplantCheckInClient is the client API for GetImplantCheckIn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetImplantCheckInClient interface {
	GetImplantCheckIn(ctx context.Context, in *Username, opts ...grpc.CallOption) (GetImplantCheckIn_GetImplantCheckInClient, error)
}

type getImplantCheckInClient struct {
	cc grpc.ClientConnInterface
}

func NewGetImplantCheckInClient(cc grpc.ClientConnInterface) GetImplantCheckInClient {
	return &getImplantCheckInClient{cc}
}

func (c *getImplantCheckInClient) GetImplantCheckIn(ctx context.Context, in *Username, opts ...grpc.CallOption) (GetImplantCheckIn_GetImplantCheckInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GetImplantCheckIn_serviceDesc.Streams[0], "/protomessages.GetImplantCheckIn/GetImplantCheckIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &getImplantCheckInGetImplantCheckInClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetImplantCheckIn_GetImplantCheckInClient interface {
	Recv() (*Implant, error)
	grpc.ClientStream
}

type getImplantCheckInGetImplantCheckInClient struct {
	grpc.ClientStream
}

func (x *getImplantCheckInGetImplantCheckInClient) Recv() (*Implant, error) {
	m := new(Implant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetImplantCheckInServer is the server API for GetImplantCheckIn service.
type GetImplantCheckInServer interface {
	GetImplantCheckIn(*Username, GetImplantCheckIn_GetImplantCheckInServer) error
}

// UnimplementedGetImplantCheckInServer can be embedded to have forward compatible implementations.
type UnimplementedGetImplantCheckInServer struct {
}

func (*UnimplementedGetImplantCheckInServer) GetImplantCheckIn(*Username, GetImplantCheckIn_GetImplantCheckInServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImplantCheckIn not implemented")
}

func RegisterGetImplantCheckInServer(s *grpc.Server, srv GetImplantCheckInServer) {
	s.RegisterService(&_GetImplantCheckIn_serviceDesc, srv)
}

func _GetImplantCheckIn_GetImplantCheckIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Username)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetImplantCheckInServer).GetImplantCheckIn(m, &getImplantCheckInGetImplantCheckInServer{stream})
}

type GetImplantCheckIn_GetImplantCheckInServer interface {
	Send(*Implant) error
	grpc.ServerStream
}

type getImplantCheckInGetImplantCheckInServer struct {
	grpc.ServerStream
}

func (x *getImplantCheckInGetImplantCheckInServer) Send(m *Implant) error {
	return x.ServerStream.SendMsg(m)
}

var _GetImplantCheckIn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protomessages.GetImplantCheckIn",
	HandlerType: (*GetImplantCheckInServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImplantCheckIn",
			Handler:       _GetImplantCheckIn_GetImplantCheckIn_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages.proto",
}

// GetTaskForListenerClient is the client API for GetTaskForListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetTaskForListenerClient interface {
	GetTaskForListener(ctx context.Context, in *UUID, opts ...grpc.CallOption) (GetTaskForListener_GetTaskForListenerClient, error)
}

type getTaskForListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewGetTaskForListenerClient(cc grpc.ClientConnInterface) GetTaskForListenerClient {
	return &getTaskForListenerClient{cc}
}

func (c *getTaskForListenerClient) GetTaskForListener(ctx context.Context, in *UUID, opts ...grpc.CallOption) (GetTaskForListener_GetTaskForListenerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GetTaskForListener_serviceDesc.Streams[0], "/protomessages.GetTaskForListener/GetTaskForListener", opts...)
	if err != nil {
		return nil, err
	}
	x := &getTaskForListenerGetTaskForListenerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetTaskForListener_GetTaskForListenerClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type getTaskForListenerGetTaskForListenerClient struct {
	grpc.ClientStream
}

func (x *getTaskForListenerGetTaskForListenerClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetTaskForListenerServer is the server API for GetTaskForListener service.
type GetTaskForListenerServer interface {
	GetTaskForListener(*UUID, GetTaskForListener_GetTaskForListenerServer) error
}

// UnimplementedGetTaskForListenerServer can be embedded to have forward compatible implementations.
type UnimplementedGetTaskForListenerServer struct {
}

func (*UnimplementedGetTaskForListenerServer) GetTaskForListener(*UUID, GetTaskForListener_GetTaskForListenerServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskForListener not implemented")
}

func RegisterGetTaskForListenerServer(s *grpc.Server, srv GetTaskForListenerServer) {
	s.RegisterService(&_GetTaskForListener_serviceDesc, srv)
}

func _GetTaskForListener_GetTaskForListener_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetTaskForListenerServer).GetTaskForListener(m, &getTaskForListenerGetTaskForListenerServer{stream})
}

type GetTaskForListener_GetTaskForListenerServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type getTaskForListenerGetTaskForListenerServer struct {
	grpc.ServerStream
}

func (x *getTaskForListenerGetTaskForListenerServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

var _GetTaskForListener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protomessages.GetTaskForListener",
	HandlerType: (*GetTaskForListenerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskForListener",
			Handler:       _GetTaskForListener_GetTaskForListener_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages.proto",
}

// GetTaskResultClient is the client API for GetTaskResult service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetTaskResultClient interface {
	GetTaskResult(ctx context.Context, in *Username, opts ...grpc.CallOption) (GetTaskResult_GetTaskResultClient, error)
}

type getTaskResultClient struct {
	cc grpc.ClientConnInterface
}

func NewGetTaskResultClient(cc grpc.ClientConnInterface) GetTaskResultClient {
	return &getTaskResultClient{cc}
}

func (c *getTaskResultClient) GetTaskResult(ctx context.Context, in *Username, opts ...grpc.CallOption) (GetTaskResult_GetTaskResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GetTaskResult_serviceDesc.Streams[0], "/protomessages.GetTaskResult/GetTaskResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &getTaskResultGetTaskResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetTaskResult_GetTaskResultClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type getTaskResultGetTaskResultClient struct {
	grpc.ClientStream
}

func (x *getTaskResultGetTaskResultClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetTaskResultServer is the server API for GetTaskResult service.
type GetTaskResultServer interface {
	GetTaskResult(*Username, GetTaskResult_GetTaskResultServer) error
}

// UnimplementedGetTaskResultServer can be embedded to have forward compatible implementations.
type UnimplementedGetTaskResultServer struct {
}

func (*UnimplementedGetTaskResultServer) GetTaskResult(*Username, GetTaskResult_GetTaskResultServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskResult not implemented")
}

func RegisterGetTaskResultServer(s *grpc.Server, srv GetTaskResultServer) {
	s.RegisterService(&_GetTaskResult_serviceDesc, srv)
}

func _GetTaskResult_GetTaskResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Username)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetTaskResultServer).GetTaskResult(m, &getTaskResultGetTaskResultServer{stream})
}

type GetTaskResult_GetTaskResultServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type getTaskResultGetTaskResultServer struct {
	grpc.ServerStream
}

func (x *getTaskResultGetTaskResultServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

var _GetTaskResult_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protomessages.GetTaskResult",
	HandlerType: (*GetTaskResultServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskResult",
			Handler:       _GetTaskResult_GetTaskResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages.proto",
}
